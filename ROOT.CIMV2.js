/**
 * @file Modification of the Management Classes generated by mgmclassgen.exe.
 * @version 0.0.1
 */
import System;
import System.Management;
import System.Diagnostics;

package ROOT.CIMV2.WIN32 {

  class Process {

    /**
     * The signature of the original Win32_Process.Create()
     * method is shortened and use-case specific.
     */
    public static function Create(CommandLine: String): uint {
      var stackTrace: StackTrace = new StackTrace();
      var methodName: String = Util.GetMethodName(stackTrace);
      var classObj: ManagementClass = new ManagementClass('Win32_Process');
      var inParams: ManagementBaseObject = classObj.GetMethodParameters(methodName);
      inParams['CommandLine'] = CommandLine;
      inParams['ProcessStartupInformation'] = ProcessStartup.CreateInstance();
      return Convert.ToUInt32(classObj.InvokeMethod(methodName, inParams, null).Properties['ProcessId'].Value);
    }

    /**
     * Wait for the specified process exit.
     * @param ParentProcessId is the parent process identifier.
     */
    public static function WaitForExit(ParentProcessId: uint) {
      // Select the process whose parent is the intermediate process used for executing the link.
      var wmiQuery = 'SELECT * FROM Win32_Process WHERE Name="pwsh.exe" AND ParentProcessId=' + ParentProcessId;
      var getProcessCount = function() {
        return (new ManagementObjectSearcher(wmiQuery)).Get().Count;
      }
      // Wait for the process to start.
      while (getProcessCount() == 0) { }
      // Wait for the process to exit.
      while (getProcessCount()) { }
    }
  }

  class ProcessStartup {

    public static function CreateInstance(): ManagementBaseObject {
      var startInfo: ManagementBaseObject = (new ManagementClass('Win32_ProcessStartup')).CreateInstance();
      startInfo['ShowWindow'] = 0;
      return startInfo;
    }
  }

  internal class Util {

    public static function GetMethodName(stackTrace: StackTrace): String {
      return stackTrace.GetFrame(0).GetMethod().Name;
    }
  }
}
